name: CMake

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: true
      matrix:
        config:
          - {
            name: "WindowsLatest",
            os: windows-latest,
            build_type: "Release",
            cc: "cl",
            cxx: "cl",
            environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat",
            generators: "Visual Studio 16 2019"
            architecture: "-A x64"
          }
          - {
            name: "UbuntuGCCLatest",
            os: ubuntu-latest,
            build_type: "Release",
            cc: "gcc",
            cxx: "g++",
            generators: "Ninja"
            architecture: ""
          }

    steps:
    - uses: actions/checkout@v2
        
    - name: Install GCC
      if: startsWith(matrix.config.name, 'UbuntuGCCLatest')
      uses: egor-tensin/setup-gcc@v1
      with:
        version: latest
        platform: x64
        
    - name: Install cmake
      if: startsWith(matrix.config.name, 'UbuntuGCCLatest')
      run: |
        sudo apt install ninja-build cmake
        cmake --version
    
    - name: Install ninja
      if: startsWith(matrix.config.name, 'UbuntuGCCLatest')
      run: |
        sudo apt install ninja-build
        ninja --version
    
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
      cmake -B ${{github.workspace}}/build \
            -G "${{ matrix.config.generators }}" \
            ${{ matrix.config.architecture }} \
            -DCMAKE_BUILD_TESTS=ON \
            -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }} \
            -DCXX_STANDARD=C++20

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{ matrix.config.build_type }}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}
      
